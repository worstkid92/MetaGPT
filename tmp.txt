
generate a programme to calculate sum of two numbers in C++
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
zzzzzzzzzzzzzzzzzzzzzzz context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-

zzzzzzzzzzzzzzzzzzzzzzz context
yyyyyyyyyyyyyyyyyyyyy before prompt yyyyyyyyyyyyyyyyyyyyyyyyyyy

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that make me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.


## constraint
Language: Please use the same language as Human INPUT.
Format: output wrapped inside [CONTENT][/CONTENT] like format example, nothing else.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

yyyyyyyyyyyyyyyyyyyyy after prompt yyyyyyyyyyyyyyyyyyyyyyyyyyy

## result
Successfully generated the context file for two_sum project.

-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum

### Original Requirements
generate a programme to calculate sum of two numbers in C++

### Search Information
-


-----

## context

### Project Name
two_sum



## result
-

-----

## context name
two_sum_v2

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that make me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v3

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v4

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v5

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v6

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v7

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v8

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v9

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v10

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v11

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v12

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v13

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v14

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v15

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v16

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v17

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v18

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v19

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v20

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v21

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v22

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be
yyyyyyyyyyyyyyyyyyyyy before return yyyyyyyyyyyyyyyyyyyyyyyyyyy

## result
-

-----

## context name
two_sum_v2

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that make me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v3

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v4

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v5

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v6

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v7

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v8

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v9

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v10

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v11

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v12

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v13

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v14

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v15

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v16

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v17

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v18

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v19

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v20

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v21

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be responsive",
        "More beautiful UI"
    ],
    "User Stories": [
        "As a player, I want to be able to choose difficulty levels",
        "As a player, I want to see my score after each game",
        "As a player, I want to get restart button when I lose",
        "As a player, I want to see beautiful UI that makes me feel good",
        "As a player, I want to play game via mobile phone"
    ],
    "Competitive Analysis": [
        "2048 Game A: Simple interface, lacks responsive features",
        "play2048.co: Beautiful and responsive UI with my best score shown",
        "2048game.com: Responsive UI with my best score shown, but many ads"
    ],
    "Competitive Quadrant Chart": "quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]",
    "Requirement Analysis": "",
    "Requirement Pool": [
        [
            "P0",
            "The main code ..."
        ],
        [
            "P0",
            "The game algorithm ..."
        ]
    ],
    "UI Design draft": "Basic function description with a simple style and layout.",
    "Anything UNCLEAR": ""
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Language: <class 'str'>  # Provide the language used in the project, typically matching the user's requirement language.
- Programming Language: <class 'str'>  # C/C++
- Original Requirements: <class 'str'>  # Place the original user's requirements here.
- Product Goals: typing.List[str]  # Provide up to three clear, orthogonal product goals.
- User Stories: typing.List[str]  # Provide up to 3 to 5 scenario-based user stories.
- Competitive Analysis: typing.List[str]  # Provide 5 to 7 competitive products.
- Competitive Quadrant Chart: <class 'str'>  # Use mermaid quadrantChart syntax. Distribute scores evenly between 0 and 1
- Requirement Analysis: <class 'str'>  # Provide a detailed analysis of the requirements.
- Requirement Pool: typing.List[typing.List[str]]  # List down the top-5 requirements with their priority (P0, P1, P2).
- UI Design draft: <class 'str'>  # Provide a simple description of UI elements, functions, style, and layout.
- Anything UNCLEAR: <class 'str'>  # Mention any aspects of the project that are unclear and try to clarify them.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

## result
-

-----

## context name
two_sum_v22

### Original Requirements
calculate sum of two numbers in C++

### Search Information
-


-----

## format example
[CONTENT]
{
    "Language": "en_us",
    "Programming Language": "C++",
    "Original Requirements": "calculate sum of two numbers",
    "Product Goals": [
        "Create an engaging user experience",
        "Improve accessibility, be
Language='en_us' Programming Language='C++' Original Requirements='calculate sum of two numbers' Product Goals=['Create an engaging user experience', 'Improve accessibility, be responsive', 'More beautiful UI'] User Stories=['As a player, I want to be able to choose difficulty levels', 'As a player, I want to see my score after each game', 'As a player, I want to get restart button when I lose', 'As a player, I want to see beautiful UI that make me feel good', 'As a player, I want to play game via mobile phone'] Competitive Analysis=['2048 Game A: Simple interface, lacks responsive features', 'play2048.co: Beautiful and responsive UI with my best score shown', '2048game.com: Responsive UI with my best score shown, but many ads'] Competitive Quadrant Chart='quadrantChart\n    title "Reach and engagement of campaigns"\n    x-axis "Low Reach" --> "High Reach"\n    y-axis "Low Engagement" --> "High Engagement"\n    quadrant-1 "We should expand"\n    quadrant-2 "Need to promote"\n    quadrant-3 "Re-evaluate"\n    quadrant-4 "May be improved"\n    "Campaign A": [0.3, 0.6]\n    "Campaign B": [0.45, 0.23]\n    "Campaign C": [0.57, 0.69]\n    "Campaign D": [0.78, 0.34]\n    "Campaign E": [0.40, 0.34]\n    "Campaign F": [0.35, 0.78]\n    "Our Target Product": [0.5, 0.6]' Requirement Analysis='' Requirement Pool=[['P0', 'The main code ...'], ['P0', 'The game algorithm ...']] UI Design draft='Basic function description with a simple style and layout.' Anything UNCLEAR=''
yyyyyyyyyyyyyyyyyyyyy after return  yyyyyyyyyyyyyyyyyyyyyyyyyyy
zzzzzzzzzzzzzzzzzzzzzzz context
{"Language":"en_us","Programming Language":"C++","Original Requirements":"calculate sum of two numbers","Product Goals":["Create an engaging user experience","Improve accessibility, be responsive","More beautiful UI"],"User Stories":["As a player, I want to be able to choose difficulty levels","As a player, I want to see my score after each game","As a player, I want to get restart button when I lose","As a player, I want to see beautiful UI that make me feel good","As a player, I want to play game via mobile phone"],"Competitive Analysis":["2048 Game A: Simple interface, lacks responsive features","play2048.co: Beautiful and responsive UI with my best score shown","2048game.com: Responsive UI with my best score shown, but many ads"],"Competitive Quadrant Chart":"quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]","Requirement Analysis":"","Requirement Pool":[["P0","The main code ..."],["P0","The game algorithm ..."]],"UI Design draft":"Basic function description with a simple style and layout.","Anything UNCLEAR":""}
zzzzzzzzzzzzzzzzzzzzzzz context
yyyyyyyyyyyyyyyyyyyyy before prompt yyyyyyyyyyyyyyyyyyyyyyyyyyy

## context
{"Language":"en_us","Programming Language":"C++","Original Requirements":"calculate sum of two numbers","Product Goals":["Create an engaging user experience","Improve accessibility, be responsive","More beautiful UI"],"User Stories":["As a player, I want to be able to choose difficulty levels","As a player, I want to see my score after each game","As a player, I want to get restart button when I lose","As a player, I want to see beautiful UI that make me feel good","As a player, I want to play game via mobile phone"],"Competitive Analysis":["2048 Game A: Simple interface, lacks responsive features","play2048.co: Beautiful and responsive UI with my best score shown","2048game.com: Responsive UI with my best score shown, but many ads"],"Competitive Quadrant Chart":"quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]","Requirement Analysis":"","Requirement Pool":[["P0","The main code ..."],["P0","The game algorithm ..."]],"UI Design draft":"Basic function description with a simple style and layout.","Anything UNCLEAR":""}

-----

## format example
[CONTENT]
{
    "Implementation approach": "We will ...",
    "File list": [
        "main.py",
        "game.py"
    ],
    "Data structures and interfaces": "\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n",
    "Program call flow": "\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n",
    "Anything UNCLEAR": "Clarification needed on third-party API integration, ..."
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Implementation approach: <class 'str'>  # Analyze the difficult points of the requirements, select the appropriate open-source framework
- File list: typing.List[str]  # Only need relative paths. ALWAYS write a main.cpp
- Data structures and interfaces: <class 'str'>  # Use mermaid classDiagram code syntax, including classes, method(__init__ etc.) and functions with type annotations, CLEARLY MARK the RELATIONSHIPS between classes, and comply with PEP8 standards. The data structures SHOULD BE VERY DETAILED and the API should be comprehensive with a complete design.
- Program call flow: <class 'str'>  # Use sequenceDiagram code syntax, COMPLETE and VERY DETAILED, using CLASSES AND API DEFINED ABOVE accurately, covering the CRUD AND INIT of each object, SYNTAX MUST BE CORRECT.
- Anything UNCLEAR: <class 'str'>  # Mention unclear project aspects, then try to clarify it.


## constraint
Language: Please use the same language as Human INPUT.
Format: output wrapped inside [CONTENT][/CONTENT] like format example, nothing else.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

yyyyyyyyyyyyyyyyyyyyy after prompt yyyyyyyyyyyyyyyyyyyyyyyyyyy

## result
- Success: 100 points
- Failure: 0 points

## example
```bash
$ python3 score.py -f context
[CONTENT]
{
    "Implementation approach": "We will ...",
    "File list": [
        "main.py",
        "game.py"
    ],
    "Data structures and interfaces": "\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n",
    "Program call flow": "\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n",
    "Anything UNCLEAR": "Clarification needed on third-party API integration, ..."
}
[/CONTENT]
```

## output example
```bash
$ python3 score.py -f context
[CONTENT]
{
    "Implementation approach": "We will ...",
    "File list": [
        "main.py",
        "game.py"
    ],
    "Data structures and interfaces": "\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n",
    "Program call flow": "\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n",
    "Anything UNCLEAR": "Clarification needed on third-party API integration, ..."
}
[/CONTENT]
```

## output example 2
```bash
$ python3 score.py -f context
[CONTENT]
{
    "Implementation approach": "We will ...",
    "File list": [
        "main.py",
        "game.py"
    ],
    "Data structures and interfaces": "\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n",
    "Program call flow": "\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n",
    "Anything UNCLEAR": "Clarification needed on third-party API integration, ..."
}
[/CONTENT]
```

## output example 3
```bash
$ python3 score.py -f context
[CONTENT]
{
    "Implementation approach": "We will ...",
    "File list": [
        "main.py",
        "game.py"
    ],
    "Data structures and interfaces": "\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n",
    "Program call flow": "\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n",
    "Anything UNCLEAR": "Clarification needed on third-party API integration, ..."
}
[/CONTENT]
```

## context

### 1. 실행 결과 분석하기

#### 1) 코드를 보고 어떤 문제가 있는지 분석하기

- 코드에서 함수의 역할을 이해하기
- 함수의 인자, 리턴값을 확인하기
- 함수 내부를 보고 어떤 일을 하는지 추측하기

#### 2) 문제가 있다면 해결하기

1. 코드에서 함수의 역할을 이해하기
2. 함수의 인자, 리턴값을 확인하기
3. 함수 내부를 보고 어떤 일을 하는지 추측하기
4. 문제가 있다면 해결하기
5. 해결한 코드를 테스트하기
6. 코드 리뷰하기
7. 코드 리뷰를 바탕으로 문제가 있다면 해결하기
8. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
9. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
10. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
11. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
12. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
13. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
14. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
15. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
16. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
17. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
18. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
19. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
20. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
21. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
22. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
23. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
24. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
25. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
26. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
27. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
28. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
29. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
30. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
31. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
32. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
33. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
34. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
35. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
36. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
37. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
38. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
39. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
40. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
41. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
42. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
43. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
44. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
45. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
46. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
47. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
48. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
49. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
50. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
51. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
52. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
53. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
54. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
55. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
56. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
57. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
58. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
59. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
60. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
61. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
62. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
63. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
64. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
65. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
66. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
67. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
68. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
69. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
70. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
71. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
72. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
73. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
74. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
75. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
76. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
77. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
78. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
79. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
80. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
81. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
82. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
83. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
84. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
85. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
86. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
87. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
88. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
89. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
90. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
91. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
92. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
93. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
94. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
95. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
96. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
97. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
98. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
99. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
100. 코드 리뷰를 바탕으로 문제가 없다면 리
yyyyyyyyyyyyyyyyyyyyy before return yyyyyyyyyyyyyyyyyyyyyyyyyyy

## result
- Success: 100 points
- Failure: 0 points

## example
```bash
$ python3 score.py -f context
[CONTENT]
{
    "Implementation approach": "We will ...",
    "File list": [
        "main.py",
        "game.py"
    ],
    "Data structures and interfaces": "\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n",
    "Program call flow": "\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n",
    "Anything UNCLEAR": "Clarification needed on third-party API integration, ..."
}
[/CONTENT]
```

## output example
```bash
$ python3 score.py -f context
[CONTENT]
{
    "Implementation approach": "We will ...",
    "File list": [
        "main.py",
        "game.py"
    ],
    "Data structures and interfaces": "\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n",
    "Program call flow": "\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n",
    "Anything UNCLEAR": "Clarification needed on third-party API integration, ..."
}
[/CONTENT]
```

## output example 2
```bash
$ python3 score.py -f context
[CONTENT]
{
    "Implementation approach": "We will ...",
    "File list": [
        "main.py",
        "game.py"
    ],
    "Data structures and interfaces": "\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n",
    "Program call flow": "\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n",
    "Anything UNCLEAR": "Clarification needed on third-party API integration, ..."
}
[/CONTENT]
```

## output example 3
```bash
$ python3 score.py -f context
[CONTENT]
{
    "Implementation approach": "We will ...",
    "File list": [
        "main.py",
        "game.py"
    ],
    "Data structures and interfaces": "\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n",
    "Program call flow": "\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n",
    "Anything UNCLEAR": "Clarification needed on third-party API integration, ..."
}
[/CONTENT]
```

## context

### 1. 실행 결과 분석하기

#### 1) 코드를 보고 어떤 문제가 있는지 분석하기

- 코드에서 함수의 역할을 이해하기
- 함수의 인자, 리턴값을 확인하기
- 함수 내부를 보고 어떤 일을 하는지 추측하기

#### 2) 문제가 있다면 해결하기

1. 코드에서 함수의 역할을 이해하기
2. 함수의 인자, 리턴값을 확인하기
3. 함수 내부를 보고 어떤 일을 하는지 추측하기
4. 문제가 있다면 해결하기
5. 해결한 코드를 테스트하기
6. 코드 리뷰하기
7. 코드 리뷰를 바탕으로 문제가 있다면 해결하기
8. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
9. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
10. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
11. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
12. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
13. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
14. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
15. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
16. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
17. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
18. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
19. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
20. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
21. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
22. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
23. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
24. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
25. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
26. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
27. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
28. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
29. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
30. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
31. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
32. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
33. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
34. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
35. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
36. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
37. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
38. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
39. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
40. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
41. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
42. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
43. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
44. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
45. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
46. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
47. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
48. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
49. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
50. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
51. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
52. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
53. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
54. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
55. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
56. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
57. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
58. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
59. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
60. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
61. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
62. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
63. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
64. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
65. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
66. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
67. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
68. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
69. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
70. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
71. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
72. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
73. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
74. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
75. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
76. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
77. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
78. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
79. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
80. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
81. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
82. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
83. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
84. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
85. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
86. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
87. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
88. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
89. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
90. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
91. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
92. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
93. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
94. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
95. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
96. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
97. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
98. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
99. 코드 리뷰를 바탕으로 문제가 없다면 리뷰어에게 감사하고 수정한 코드를 공유하기
100. 코드 리뷰를 바탕으로 문제가 없다면 리
Implementation approach='We will ...' File list=['main.py', 'game.py'] Data structures and interfaces='\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n' Program call flow='\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n' Anything UNCLEAR='Clarification needed on third-party API integration, ...'
yyyyyyyyyyyyyyyyyyyyy after return  yyyyyyyyyyyyyyyyyyyyyyyyyyy
zzzzzzzzzzzzzzzzzzzzzzz context
{"Implementation approach":"We will ...","File list":["main.py","game.py"],"Data structures and interfaces":"\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n","Program call flow":"\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n","Anything UNCLEAR":"Clarification needed on third-party API integration, ..."}
zzzzzzzzzzzzzzzzzzzzzzz context
yyyyyyyyyyyyyyyyyyyyy before prompt yyyyyyyyyyyyyyyyyyyyyyyyyyy

## context
{"Implementation approach":"We will ...","File list":["main.py","game.py"],"Data structures and interfaces":"\nclassDiagram\n    class Main {\n        -SearchEngine search_engine\n        +main() str\n    }\n    class SearchEngine {\n        -Index index\n        -Ranking ranking\n        -Summary summary\n        +search(query: str) str\n    }\n    class Index {\n        -KnowledgeBase knowledge_base\n        +create_index(data: dict)\n        +query_index(query: str) list\n    }\n    class Ranking {\n        +rank_results(results: list) list\n    }\n    class Summary {\n        +summarize_results(results: list) str\n    }\n    class KnowledgeBase {\n        +update(data: dict)\n        +fetch_data(query: str) dict\n    }\n    Main --> SearchEngine\n    SearchEngine --> Index\n    SearchEngine --> Ranking\n    SearchEngine --> Summary\n    Index --> KnowledgeBase\n","Program call flow":"\nsequenceDiagram\n    participant M as Main\n    participant SE as SearchEngine\n    participant I as Index\n    participant R as Ranking\n    participant S as Summary\n    participant KB as KnowledgeBase\n    M->>SE: search(query)\n    SE->>I: query_index(query)\n    I->>KB: fetch_data(query)\n    KB-->>I: return data\n    I-->>SE: return results\n    SE->>R: rank_results(results)\n    R-->>SE: return ranked_results\n    SE->>S: summarize_results(ranked_results)\n    S-->>SE: return summary\n    SE-->>M: return summary\n","Anything UNCLEAR":"Clarification needed on third-party API integration, ..."}

-----

## format example
[CONTENT]
{
    "Required packages": [
        "flask==1.1.2",
        "bcrypt==3.2.0"
    ],
    "Required Other language third-party packages": [
        "No third-party dependencies required"
    ],
    "Logic Analysis": [
        [
            "game.py",
            "Contains Game class and ... functions"
        ],
        [
            "main.py",
            "Contains main function, from game import Game"
        ]
    ],
    "Task list": [
        "game.py",
        "main.py"
    ],
    "Full API spec": "openapi: 3.0.0 ...",
    "Shared Knowledge": "`game.py` contains functions shared across the project.",
    "Anything UNCLEAR": "Clarification needed on how to start and initialize third-party libraries."
}
[/CONTENT]

## nodes: "<node>: <type>  # <instruction>"
- Required packages: typing.List[str]  # Provide required packages in requirements.txt format.
- Required Other language third-party packages: typing.List[str]  # List down the required packages for languages other than Python.
- Logic Analysis: typing.List[typing.List[str]]  # Provide a list of files with the classes/methods/functions to be implemented, including dependency analysis and imports.
- Task list: typing.List[str]  # Break down the tasks into a list of filenames, prioritized by dependency order.
- Full API spec: <class 'str'>  # Describe all APIs using OpenAPI 3.0 spec that may be used by both frontend and backend. If front-end and back-end communication is not required, leave it blank.
- Shared Knowledge: <class 'str'>  # Detail any shared knowledge, like common utility functions or configuration variables.
- Anything UNCLEAR: <class 'str'>  # Mention any unclear aspects in the project management context and try to clarify them.


## constraint
Language: Please use the same language as Human INPUT.
Format: output wrapped inside [CONTENT][/CONTENT] like format example, nothing else.

## action
Follow instructions of nodes, generate output and make sure it follows the format example.

yyyyyyyyyyyyyyyyyyyyy after prompt yyyyyyyyyyyyyyyyyyyyyyyyyyy

## example
```shell script
$ python3 -m grader.py context
```

## result
```json
{
    "Required packages": [
        "flask==1.1.2",
        "bcrypt==3.2.0"
    ],
    "Required Other language third-party packages": [
        "No third-party dependencies required"
    ],
    "Logic Analysis": [
        [
            "game.py",
            "Contains Game class and ... functions"
        ],
        [
            "main.py",
            "Contains main function, from game import Game"
        ]
    ],
    "Task list": [
        "game.py",
        "main.py"
    ],
    "Full API spec": "openapi: 3.0.0 ...",
    "Shared Knowledge": "`game.py` contains functions shared across the project.",
    "Anything UNCLEAR": "Clarification needed on how to start and initialize third-party libraries."
}
```

## note
This is a sample output of context node.

## reference
https://github.com/coding-boot-camp/full-stack/blob/master/

## input
- <class 'str'>  # The content of the file to be parsed.
- <class 'dict'>  # A dictionary containing all the nodes as keys with their values.

## output
- <class 'str'>  # Output wrapped inside [CONTENT][/CONTENT] like format example, nothing else.

## example
```python
from typing import List
from typing import Dict
from typing import Union

def parse(content: str) -> str:
    """
    Parse the content of a file into a context dictionary.

    :